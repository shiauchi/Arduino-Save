
date:2020/04/11

file:pzem01_20200411.ino

1.因為串列傳輸的函式serial.write()『在程式中為ltk7697.write()』只能傳送整數，不能傳小數，所以要將數值先乘上100後再傳到  Linkit7697，才有辦法取到小數位數的值。

2.由nano搜集到的電流數值是正確的，但是如果乘上1000(換成mA)，經由I2C丟到Linkit7697的話，會因為溢位而造成數值亂掉，因此在程式中將nano搜集到的電流值乘上100，以10mA單位來顯示的話就沒有這個問題。
***********************************************************************************************************************

file:MCS_ViTestDevice_0711.ino
1.要打開「序列埠監控視窗」後，Linkit7697才會開始透過Wi-Fi連上MCS。
2.Linkit7697有時會當機不傳電流數值上去，要把它的電源重新插拔，讓它重新啟動後通常就會好了。
***********************************************************************************************************************
bug:
1.在nano的總消耗功率值正確，但是傳到linkit7697則總消耗功率顯示數值會有錯。
2.臨界斷電功能不正確。

=======================================================================================================================

date:2020/04/12

FIX:
1.problem:在nano的總消耗功率值正確，但是傳到linkit7697則總消耗功率顯示數值會有錯。
  solution:調整在pzem01_20200411.ino中loop迴圈的delay時間，使它與MCS_ViTestDevice_0711.ino中的delay時間同為8秒。

2.problem:"總消耗功率"的數值在nano抓到的數值是正確的，但傳到linkit7697之後就不對了。
  solution:因為串列埠傳輸serial.write()一次只能傳送1個Byte的數值(0~255)，所以如果超過255的數值就無法正確的傳送到另一方，因此解決之道是只傳送電壓及電流的值，在inkit7697計算總消耗功率的值後直接送到雲端。

***********************************************************************************************************************

BUG:
1.IoT插座的啟閉控制程式應該放在linkit7697裡，因為由雲端控制插座的啟閉程式要寫在linkit7697裡。在nano中是用D9腳控制支路1的啟閉，要在LINIKIT7697的程式中寫兩個電力支路的控制程式(支路1及支路2，支路3的迴路為不可斷電的迴路)。

=======================================================================================================================

date:2020/04/22

FIX:
1.problem:Nano收集到的電流值如果太大(超過2.5A)經由串列傳送則無法在linkit7697接收到正確的值。
  solution:調整在pzem01_20200411.ino中Nano收集到的電流直i*10(原先是乘上100使傳送到7697的電流單位為0.01A)後，使傳送到7697的電流單位降為0.1A，則最大可傳送到7697的電流值則由原來的2.55A提升到25.5A，但是因為電流的精準度少了1個小數位，所以對於較小功率的電器(例如：30W的銲槍)則在7697端計算功率之後比較容易會有較大的誤差發生。


***********************************************************************************************************************

BUG:
1.IoT插座的啟閉控制程式應該放在linkit7697裡，因為由雲端控制插座的啟閉程式要寫在linkit7697裡。在nano中是用D9腳控制支路1的  啟閉，要在LINIKIT7697的程式中寫兩個電力支路的控制程式(支路1及支路2，支路3的迴路為不可斷電的迴路)。

=======================================================================================================================

date:2020/05/06

ADD:
1.將控制IoT插座的腳位由nano的D9改到Linkit7697的P2

NEXT:
1.下次要把從MCS控制IoT插座的程式加上。

=======================================================================================================================
date:2020/05/10
1.提升電流及電壓傳送到mcs的精準度到小數點第2位。
2.完成從mcs以「彈性用電支路」按鈕控制IoT插座啟閉功能。

=======================================================================================================================
date:2020/06/06

1.在mcs網站上新增兩個按鈕(switch2,switch3)，讓mcs網站上合計有3個按鈕可以遠端開關電路支路。
檔案：
MCS_ViTestDevice_0711.ino

2.在網站上顯示目前是第幾電力支路。
檔案：
pzem01_20200411.ino 
MCS_ViTestDevice_0711.ino


















